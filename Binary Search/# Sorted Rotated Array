//////////////////.................................Number of times the sorted array is rotated(Recursive).......................////////////////////////////////////////

//Binary Search Approach (Recursive Approach): Time _Complex: O(logn) 
#include<bits/stdc++.h>
using namespace std;

//Count Rotation 
int countRotation(int arr[], int low, int high)
{
    if(high < low)
       return 0;
    
    if(high == low)
       return low;
    int mid = low + (high-low)/2;
    if(mid < high && arr[mid+1] < arr[mid])
       return mid+1;
    if(mid > low && arr[mid-1] > arr[mid])
       return mid;
    if(arr[mid] < arr[high])
       return countRotation(arr, low, mid-1);
    return countRotation(arr, mid+1, high);   
}

int main()
{
    int arr[] = {7, 9, 10, 1, 2, 5, 6};
    int n = sizeof(arr)/sizeof(arr[0]);
    int low = 0;
    int high = n-1;
    int co = countRotation(arr, low, high);
    cout<<"Count: "<<co;
    return 0;
}
