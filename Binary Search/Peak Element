/////////////////////////....................Learn Search approach....................../////////////////////////
int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if(n == 1)
            return 0;
        if(nums[n-1] > nums[n-2])
            return n-1;
        if(nums[0] > nums[1])
                return 0;
        for(int i = 1; i<n-1; i++)
        {
            if(nums[i] > nums[i+1] && nums[i] > nums[i-1])
                return i;
        }    
        return -1;
    }
///////////////////....................Binary Search Approach......................////////////////////////////////
#include<bits/stdc++.h>
using namespace std;

    int findPeakElement(int nums[], int n) {
        int low = 0;
        int high = n-1;
        while(low<=high)
        {
            int mid = low+(high-low)/2;
            if(mid > 0 && mid < n-1)
            {
                if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1])
                    return mid;
                else if(nums[mid-1] > nums[mid])
                    high = mid-1;
                else
                    low = mid+1;
            }
            else if(mid == 0)
            {
                if(nums[0] > nums[1])
                    return mid;
                else
                    return mid+1;
            }
            else if(mid == n-1)
            {
                if(nums[n-1] > nums[n-2])
                    return n-1;
                else
                    return n-2;
            }    
        }
        return -1;
    }
    
int main()
{
    int nums[] = {5, 10, 20, 21, 25, 22};
    int n = sizeof(nums)/sizeof(nums[0]);
    int index = findPeakElement(nums, n);
    cout<<index;
    return 0;
}
