https://www.geeksforgeeks.org/find-first-and-last-positions-of-an-element-in-a-sorted-array/

//Find first and last positions of an element in a sorted array.

//arr[] = {1, 3, 5, 5, 5, 5, 6, 7, 9, 10};  x = 5
//First Index: 2   Last Index: 5

//////////////////////..............Brute Force: Time _Complex: O(n)............................////////////////////////////////

#include<bits/stdc++.h>
using namespace std;

void findElement(int arr[], int n, int x)
{
    int first = -1, last = -1;
    for(int i = 0; i < n; i++)
    {
        if(arr[i]!=x)
           continue;
        if(first == -1)
           first = i;
        last = i;   
    }
    cout<<"First Index: "<<first<<endl;
    cout<<"Last Index: "<<last<<endl;
}

int main()
{
    int arr[] = {1, 3, 5, 5, 5, 5, 6, 7, 9, 10};
    int n = sizeof(arr)/sizeof(arr[0]);
    int x = 5; 
    findElement(arr, n, x);
    return 0;
}

//////////////////////....................Binary Search Approach...........................//////////////////////
//First and the Last Occurance of an element
//arr[] = {1, 3, 5, 5, 5, 5, 6, 7, 9, 10};  x = 5
//First Index: 2   Last Index: 5
//Binary Search Approach (Iterative method): Time _Complex: O(logn) 

#include<bits/stdc++.h>
using namespace std;

//first Index
int findFirst(int arr[], int n, int x)
{
    int low = 0;
    int high = n-1;
    int res = -1;
    while(low <= high)
    {
        int mid = low + (high-low)/2;
        if(arr[mid] == x)
        {
            res = mid;
            high = mid-1;
        }
        else
        {
            if(arr[mid] < x)
               low = mid+1;
            else
               high = mid-1;
        }   
    }
    return res; 
}

//last Index
int findLast(int arr[], int n, int x)
{
    int low = 0;
    int high = n-1;
    int res = -1;
    while(low <= high)
    {
        int mid = low + (high-low)/2;
        if(arr[mid] == x)
        {
            res = mid;
            low = mid+1;
        }
        else
        {
            if(arr[mid] < x)
               low = mid+1;
            else
               high = mid-1;
        }
    }
    return res;
}
int main()
{
    int arr[] = {1, 2, 5, 5, 5, 5, 5, 7, 9, 10};
    int n = sizeof(arr)/sizeof(arr[0]);
    int x = 5; 
    int first = findFirst(arr, n, x);
    int last = findLast(arr, n, x);
    cout<<"First Index: "<<first<<endl;
    cout<<"Last Index: "<<last<<endl;
    return 0;
}

//////////////////////////////.............Binary Search Recursive Approach...........///////////////////////////////
//First and the Last Occurance of an element
//arr[] = {1, 3, 5, 5, 5, 5, 6, 7, 9, 10};  x = 5
//First Index: 2   Last Index: 5
//Binary Search Approach (Recursive Approach): Time _Complex: O(logn) 
#include<bits/stdc++.h>
using namespace std;

//first index recurive func
int findFirst(int arr[], int low, int high, int n, int x)
{
    if(high >= low)
    {
        int mid = low + (high-low)/2;
        if((mid == 0 || x > arr[mid-1]) && x == arr[mid])
            return mid;
        else if(arr[mid] < x)
            return findFirst(arr, mid+1, high, n, x);
        else
            return findFirst(arr, low, mid-1, n, x);
    }
    return -1;
}

//last Index
int findLast(int arr[], int low, int high, int n, int x)
{
    if (high >= low) {
        int mid = low + (high - low) / 2;
        if ((mid == n - 1 || x < arr[mid + 1]) && arr[mid] == x)
            return mid;
        else if (x < arr[mid])
            return findLast(arr, low, (mid - 1), n, x);
        else
            return findLast(arr, (mid + 1), high, n, x);
    }
    return -1;
}
int main()
{
    int arr[] = {1, 2, 5, 5, 5, 5, 5, 7, 9, 10};
    int n = sizeof(arr)/sizeof(arr[0]);
    int x = 5; 
    int low = 0;
    int high = n-1;
    int first = findFirst(arr, low, high, n, x);
    int last = findLast(arr, low, high, n, x);
    cout<<"First Index: "<<first<<endl;
    cout<<"Last Index: "<<last<<endl;
    return 0;
}

