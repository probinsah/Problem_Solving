Kadane's Algorithm is use to find the Largest sum contiguous Subarray. 
arr = {-2, -3, 4, -1, -2,  1, 5, -3}
4 + -1 + -2 + 1 + 5 = 7 <<<---answer

Kadane's Algorithm steps:

1. max_so_far = INT_MIN,  max_end_here = 0;

2. Run a Loop for each element 
   a) max_end_here = max_end_here + arr[i]
   b) if(max_so_far < max_end_here)
         max_so_far = max_end_here;
   c) if(max_end_here < 0)
         max_end_here = 0;
         
3. Return max_so_far;

Time complexity O(n)
Space complexity O(1)

Question base on Kadane's Algorithm
1. Maximum Subarray Sum
https://leetcode.com/problems/maximum-subarray/

2. Maximum Subarray Sum after K Concatenation (Hard)
https://leetcode.com/problems/k-concatenation-maximum-sum/

3. Flip Bits
3. a) Maximize number of 0s by flipping a subarray
      https://www.geeksforgeeks.org/maximize-number-0s-flipping-subarray/
      
   b) Find zeroes to be flipped so that number of consecutive 1â€™s is maximized
      https://www.geeksforgeeks.org/find-zeroes-to-be-flipped-so-that-number-of-consecutive-1s-is-maximized/
      
4. Maximum Sum Rectangle
#include<bits/stdc++.h>
using namespace std;

#define ROW 4
#define COL 5

int kadane(int *arr, int *start, int *finish, int n)
{
    int sum = 0, max_sum = INT_MIN, i;
    
    *finish = -1;
    int local_start = 0;
    
    for(i = 0; i < n; i++)
    {
        sum += arr[i];
        if(sum < 0)
        {
            sum = 0;
            local_start = i+1;
        }
        else if(sum > max_sum)
        {
            max_sum = sum;
            *start = local_start;
            *finish = i;
        }
    }
    
    //When there is at-least one non-negative element.
    if(*finish != -1)
       return max_sum;
       
    //Special Case: When all the element is negative.
    max_sum = arr[i];
    *start = *finish = 0;
    
    for(i = 1; i < n; i++)
    {
        if(max_sum < arr[i])
        {
            max_sum = arr[i];
            *start = *finish = i;
        }  
    }
    return max_sum;
}

void findMaxSum(int M[][COL])
{
    
    int maxSum = 0;
    int maxLeft;
    int maxRight;
    int maxTop;
    int maxBottom;
    
    int left, right, i;
    int currSum = 0;
    int temp[ROW], start, finish;
    
    for(left = 0; left < COL; left++)
    {
        memset(temp, 0, sizeof(temp));
        for(right = left; right < COL; right++)
        {
            for(int i = 0; i < ROW; i++)
                temp[i] += M[i][right];
                
            currSum = kadane(temp, &start, &finish, ROW);
            
            if(currSum > maxSum)
            {
                maxSum = currSum;
                maxLeft = left;
                maxRight = right;
                maxTop = start;
                maxBottom = finish;
            }
        }
    }
    
    cout << "(Top, Left) ("<<maxTop <<", "<<maxLeft<<")"<< endl;
    cout << "(Bottom, Right) ("<< maxBottom << ", "<< maxRight <<")"<< endl;
    cout << " Max sum is: " << maxSum << endl;
}

int main()
{
    int M[ROW][COL] = { { 1, 2, -1, -4, -20 },
                    { -8, -3, 4, 2, 1 },
                    { 3, 8, 10, 1, 3 },
                    { -4, -1, 1, 7, -6 }};
 
    // Function call
    findMaxSum(M);
    return 0;
}
