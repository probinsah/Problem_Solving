//Flood Fill Problem 

/*Using recursion
First change the color of the current pixel and 
then change the color of 4 surrounding pixels if 
there color is same as current pixel*/
#include<iostream>
using namespace std;

#define N 8
#define M 8

//Step 3: Recursive Func for Chnaging color
void FloodFillUntil(int screen[][N], int x, int y, int prevC, int newC)
{
    if(x < 0 || x > M || y < 0 || y > N)
       return;
    if(screen[x][y]!=prevC)
       return;
    if(screen[x][y] == newC)
       return;
    //change the color
    screen[x][y] = newC;
    //Recursive call
    FloodFillUntil(screen, x+1, y, prevC, newC);
    FloodFillUntil(screen, x-1, y, prevC, newC);
    FloodFillUntil(screen, x, y-1, prevC, newC);
    FloodFillUntil(screen, x, y+1, prevC, newC);
}

//Step 2: FloodFill function to find current color and change it to newColor
void FloodFill(int screen[][N], int x, int y, int newC)
{
    int prevC = screen[x][y];
    FloodFillUntil(screen, x, y, prevC, newC);
}

//Step 1: main function
int main()
{
    int screen[M][N] = {{1, 1, 1, 1, 1, 1, 1, 1},
                      {1, 1, 1, 1, 1, 1, 0, 0},
                      {1, 0, 0, 1, 1, 0, 1, 1},
                      {1, 2, 2, 2, 2, 0, 1, 0},
                      {1, 1, 1, 2, 2, 0, 1, 0},
                      {1, 1, 1, 2, 2, 2, 2, 0},
                      {1, 1, 1, 1, 1, 2, 1, 1},
                      {1, 1, 1, 1, 1, 2, 2, 1}};
                      
    int x = 4, y = 4, newC = 3;
    FloodFill(screen, x, y, newC);
    cout<<"The new Pixel values";
    for(int i = 0; i < M; i++)
    {
        for(int j = 0; j < N; j++)
        {
            cout<<screen[i][j]<<" "
        }
        cout<<endl;
    }
    return 0;
}

//////////////////////////// Using BST Method/////////////////////////////////////////////////////
//Flood Fill Alorithm 
#include<bits/stdc++.h>
using namespace std;

//function to check valid coordiate
int valid(int x, int y, int m, int n)
{
    if(x < 0 || x >= m || y < 0 || y >= n)
       return 0;
       
    return 1;   
}

/*Using BFS Approach:
1. create visited[][] and initialize all coordiate with 0.
2. create a queue<pair> for {x, y}, push initial {x, y}
   mark as visited = 1
3. while(Repeat the process till queue become empty)
--> take the front element from queue, check the color value,
    coordiate conditions & change its color if satisfied and pop()*/
void bfs(int m, int n, int data[][8], int x, int y, int color)
{
    int vis[101][101];
    memset(vis, 0, sizeof(vis));
    
    queue<pair<int, int>> obj;
    obj.push({x, y});
    vis[x][y] = 1;
    
    while(!obj.empty())
    {
        pair<int, int> coord = obj.front();
        int x = coord.first;
        int y = coord.second;
        
        int prevC = data[x][y];
        data[x][y] = color;
        obj.pop();
        //check conditions for UP, DOWN, LEFT, RIGHT
        if(valid(x+1, y, m, n) && data[x+1][y] == prevC && vis[x+1][y] == 0)
        {
            data[x+1][y] = color;
            vis[x+1][y] = 1;
        }
        if(valid(x-1, y, m, n) && data[x-1][y] == prevC && vis[x-1][y] == 0)
        {
            data[x-1][y] = color;
            vis[x-1][y] = 1;
        }
        if(valid(x, y+1, m, n) && data[x][y+1] == prevC && vis[x][y+1] == 0)
        {
            data[x][y+1] = color;
            vis[x][y+1] = 1;
        }
        if(valid(x, y-1, m, n) && data[x][y-1] == prevC && vis[x][y-1] == 0)
        {
            data[x][y-1] = color;
            vis[x][y-1] = 1;
        }
    }
    //Print the new matrix
    for(int i = 0; i < m; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cout<<data[i][j]<<" ";
        }
        cout<<"\n";
    }
}

//main function
int main()
{
    int m = 8, n = 8;
    
    int data[8][8] = {
    { 1, 1, 1, 1, 1, 1, 1, 1 },
    { 1, 1, 1, 1, 1, 1, 0, 0 },
    { 1, 0, 0, 1, 1, 0, 1, 1 },
    { 1, 2, 2, 2, 2, 0, 1, 0 },
    { 1, 1, 1, 2, 2, 0, 1, 0 },
    { 1, 1, 1, 2, 2, 2, 2, 0 },
    { 1, 1, 1, 1, 1, 2, 1, 1 },
    { 1, 1, 1, 1, 1, 2, 2, 1 }};
    
    int x = 4, y = 4, color = 3;
    bfs(m, n, data, x, y, color);
    return 0;
}
