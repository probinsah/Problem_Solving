//Flood Fill Problem 

/*Using recursion
First change the color of the current pixel and 
then change the color of 4 surrounding pixels if 
there color is same as current pixel*/
#include<iostream>
using namespace std;

#define N 8
#define M 8

//Step 3: Recursive Func for Chnaging color
void FloodFillUntil(int screen[][N], int x, int y, int prevC, int newC)
{
    if(x < 0 || x > M || y < 0 || y > N)
       return;
    if(screen[x][y]!=prevC)
       return;
    if(screen[x][y] == newC)
       return;
    //change the color
    screen[x][y] = newC;
    //Recursive call
    FloodFillUntil(screen, x+1, y, prevC, newC);
    FloodFillUntil(screen, x-1, y, prevC, newC);
    FloodFillUntil(screen, x, y-1, prevC, newC);
    FloodFillUntil(screen, x, y+1, prevC, newC);
}

//Step 2: FloodFill function to find current color and change it to newColor
void FloodFill(int screen[][N], int x, int y, int newC)
{
    int prevC = screen[x][y];
    FloodFillUntil(screen, x, y, prevC, newC);
}

//Step 1: main function
int main()
{
    int screen[M][N] = {{1, 1, 1, 1, 1, 1, 1, 1},
                      {1, 1, 1, 1, 1, 1, 0, 0},
                      {1, 0, 0, 1, 1, 0, 1, 1},
                      {1, 2, 2, 2, 2, 0, 1, 0},
                      {1, 1, 1, 2, 2, 0, 1, 0},
                      {1, 1, 1, 2, 2, 2, 2, 0},
                      {1, 1, 1, 1, 1, 2, 1, 1},
                      {1, 1, 1, 1, 1, 2, 2, 1}};
                      
    int x = 4, y = 4, newC = 3;
    FloodFill(screen, x, y, newC);
    cout<<"The new Pixel values";
    for(int i = 0; i < M; i++)
    {
        for(int j = 0; j < N; j++)
        {
            cout<<screen[i][j]<<" "
        }
        cout<<endl;
    }
    return 0;
}
