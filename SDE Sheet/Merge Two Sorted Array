Approach 1: Compare each element of arr1 with first element of arr2 and swap if needed 
after each swap sort the arr2 before comparing the next element of arr1.  Time Complexity O(n*m)

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Recursion_Demo
{
    class Program
    {
        public static void mergeSortedArray(int[] arr1, int[] arr2)
        {
            int n = arr1.Length;
            int m = arr2.Length;

            for(int i = 0; i<n; i++)
            {
                if(arr1[i] > arr2[0])
                {
                    int temp = arr1[i];
                    arr1[i] = arr2[0];
                    arr2[0] = temp;
                    //after swapping the first element of second array 
                    //put the firstElement of arr2 in its correct position
                    int firstElement = arr2[0];
                    int k;
                    for(k = 1; k < m && arr2[k] < firstElement; k++)
                    {
                        arr2[k - 1] = arr2[k];
                    }
                    arr2[k - 1] = firstElement;
                }
            }
            foreach(int i in arr1)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine();
            foreach(int i in arr2)
            {
                Console.Write(i + " ");
            }
        }
        static void Main(string[] args)
        {
            int[] arr1 = { 1, 3, 5, 7 };
            int[] arr2 = { 0, 2, 6, 8, 9 };
            mergeSortedArray(arr1, arr2);
            Console.ReadKey();
        }
    }
}
