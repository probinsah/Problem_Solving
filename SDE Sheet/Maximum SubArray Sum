Approach 1: Using three for loop we construct all the possible subarray and calculate the sum of each subarray and return the maxSum. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Recursion_Demo
{
    class Program
    {
        public static int maximumSubArraySum(int[] arr)
        {
            int n = arr.Length;
            int maxSum = int.MinValue;
            for(int i = 0; i < n; i++)
            {
                for(int j = i; j < n; j++)
                {
                    int sum = 0;
                    for(int k = i; k <= j; k++)
                    {
                        sum += arr[k];
                    }
                    maxSum = Math.Max(maxSum, sum);
                }
            }
            return maxSum;
        }
        static void Main(string[] args)
        {
            int[] arr = { -2, -3, 4, -1, -2, 1, 5, -3 };
            int sum = maximumSubArraySum(arr);
            Console.Write(sum);
            Console.ReadKey();
        }
    }
}

Approach 2: 
